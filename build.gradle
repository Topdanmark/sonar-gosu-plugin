plugins {
    id 'antlr'
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '6.3.1.5724'
    id 'com.gradleup.shadow' version '9.1.0'
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

group = 'de.friday'

dependencies {
    antlr 'org.antlr:antlr4:4.13.2'

    implementation 'org.sonarsource.api.plugin:sonar-plugin-api:13.0.0.3026'
    implementation 'org.sonarqube:org.sonarqube.gradle.plugin:6.3.1.5724'
    implementation 'org.sonarsource.analyzer-commons:sonar-analyzer-commons:2.18.0.3393'
    implementation 'org.sonarsource.java:java-surefire:8.18.0.40025'
    implementation 'org.reflections:reflections:0.10.2'
    implementation 'com.google.inject:guice:7.0.0'

    testImplementation "org.sonarsource.sonarqube:sonar-plugin-api-impl:${sonarqubeArtifactVersion}"
    testImplementation "org.sonarsource.sonarqube:sonar-testing-harness:${sonarqubeArtifactVersion}"
    testImplementation "org.sonarsource.sonarqube:sonar-ws:${sonarqubeArtifactVersion}"

    testImplementation "org.sonarsource.orchestrator:sonar-orchestrator:${sonarqubeOrchestratorVersion}"
    testImplementation "org.sonarsource.orchestrator:sonar-orchestrator-junit5:${sonarqubeOrchestratorVersion}"

    testImplementation 'org.junit.jupiter:junit-jupiter:5.13.4'

    testImplementation 'com.google.protobuf:protobuf-java-util:4.32.0'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def antlrGeneratedSourcesPath = ['de', 'friday', 'sonarqube', 'gosu', 'antlr']

generateGrammarSource {
    maxHeapSize = "128m"
    outputDirectory = file("${layout.buildDirectory.asFile.get()}/generated-src/antlr/main/${antlrGeneratedSourcesPath.join("/")}")
    arguments += ["-visitor", "-listener", "-package", antlrGeneratedSourcesPath.join(".")]
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:none"]
    dependsOn generateGrammarSource
}

compileTestJava {
    options.encoding = 'UTF-8'
    dependsOn generateTestGrammarSource
}

test {
    useJUnitPlatform()
    testLogging {
        showExceptions = true
        exceptionFormat = 'full'
        showStandardStreams = true
        events 'passed', 'skipped', 'failed'
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation.set(file("build/jacocoHtml"))
    }

    //Excludes ANTLR generated sources
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "${antlrGeneratedSourcesPath.join("/")}/**",
            ])
        }))
    }
}

sourceSets {
    create("testIntegration") {
        java {
            srcDir("src/testIntegration/java")
            compileClasspath += configurations["testRuntimeClasspath"]
            runtimeClasspath += configurations["testRuntimeClasspath"]
        }
    }
}

abstract class IntegrationTest extends Test { }

tasks.withType(IntegrationTest).configureEach {
    testClassesDirs = sourceSets["testIntegration"].output.classesDirs
    classpath = sourceSets["testIntegration"].runtimeClasspath
    dependsOn(shadowJar)
}

tasks.register("testIntegration", IntegrationTest) {
    description = "Runs integration tests"
    group = "verification"
    systemProperties([
            "sonarServerVersion": providers.gradleProperty("sonarqubeServerVersion").getOrElse(sonarqubeServerVersion),
            "gosuPluginVersion": providers.gradleProperty("sonarGosuPluginVersion").getOrElse(version.toString())
    ])
    useJUnitPlatform {
        includeTags("integration")
    }
    testLogging {
        showExceptions = true
        exceptionFormat = 'full'
        showStandardStreams = true
        events 'passed', 'skipped', 'failed'
    }
}

sonarqube {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "${layout.buildDirectory}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.sourceEncoding", "UTF-8"
        //Excludes ANTLR generated files
        property "sonar.exclusions", "src/**/${antlrGeneratedSourcesPath.join("/")}/**/*"
    }
}

assemble {
    dependsOn(tasks.shadowJar)
}

shadowJar {
    archiveBaseName = project.name
    archiveClassifier = ''
    configurations = [project.configurations.compileClasspath]
    mergeServiceFiles()
    dependencies {
        exclude(dependency('org.sonarsource.sonarqube:.*'))
        exclude(dependency('org.slf4j:.*'))
    }
}

jar {
    archiveBaseName = project.name
    archiveClassifier = 'no-deps' //no dependencies included
    enabled = false
    manifest {
        def pluginVersion = project.version
        def displayVersion = project.hasProperty('buildNumber') ? pluginVersion.substring(0, pluginVersion.lastIndexOf('.')) + " (build ${project.buildNumber})" : pluginVersion
        def buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes(
                'Build-Time': "${buildDate}",
                'Implementation-Build': 'git rev-parse HEAD'.execute().text.trim(),
                'Plugin-BuildDate': "${buildDate}",
                'Plugin-ChildFirstClassLoader': 'false',
                'Plugin-Class': 'de.friday.sonarqube.gosu.GosuPlugin',
                'Plugin-Description': 'Gosu Programming Language Plugin for SonarQube',
                'Plugin-Display-Version': "${displayVersion}",
                'Plugin-IssueTrackerUrl': 'https://github.com/FRI-DAY/sonar-gosu-plugin/issues',
                'Plugin-Key': 'gosu',
                'Plugin-License': 'GNU AGPL 3',
                'Plugin-Name': 'Gosu Language Plugin',
                'Plugin-Homepage': 'https://github.com/FRI-DAY/sonar-gosu-plugin',
                'Plugin-Organization': 'If Skadeforsikring, filial af If Skadeförsäkring AB (publ), Sverige',
                'Plugin-OrganizationUrl': 'https://www.if.dk',
                'Plugin-SourcesUrl': "${pluginRepositoryUrl}",
                'Plugin-Version': "${pluginVersion}",
                'SonarLint-Supported': 'true',
                'Version': "${pluginVersion}"
        )
    }
}
